/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceryLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TraceryProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.TraceryProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TraceryProgram:
		//	'{'
		//	instructions+=Instruction
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//instructions+=Instruction
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class FirstJSONStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.FirstJSONStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueFirstJSONFinishParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//FirstJSONStatements hidden():
		//	'&' name=ID '&' ':' value=FirstJSONFinish;
		@Override public ParserRule getRule() { return rule; }
		
		//'&' name=ID '&' ':' value=FirstJSONFinish
		public Group getGroup() { return cGroup; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_2() { return cAmpersandKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//value=FirstJSONFinish
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//FirstJSONFinish
		public RuleCall getValueFirstJSONFinishParserRuleCall_4_0() { return cValueFirstJSONFinishParserRuleCall_4_0; }
	}
	public class FirstJSONFinishElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.FirstJSONFinish");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInternalValsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FirstJSONFinish hidden():
		//	'[' InternalVals ']' ',';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' InternalVals ']' ','
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//InternalVals
		public RuleCall getInternalValsParserRuleCall_1() { return cInternalValsParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class InitialValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InitialVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValInternalInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValInternalInstructionInternalInstructionsParserRuleCall_1_0 = (RuleCall)cValInternalInstructionAssignment_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InitialVal hidden(WS):
		//	'&' valInternalInstruction+=InternalInstructions+ '&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&' valInternalInstruction+=InternalInstructions+ '&'
		public Group getGroup() { return cGroup; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//valInternalInstruction+=InternalInstructions+
		public Assignment getValInternalInstructionAssignment_1() { return cValInternalInstructionAssignment_1; }
		
		//InternalInstructions
		public RuleCall getValInternalInstructionInternalInstructionsParserRuleCall_1_0() { return cValInternalInstructionInternalInstructionsParserRuleCall_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_2() { return cAmpersandKeyword_2; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstInstructionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstInstructionFirstJSONStatementsParserRuleCall_0_0 = (RuleCall)cFirstInstructionAssignment_0.eContents().get(0);
		private final Assignment cLastInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLastInstructionLastJSONStatementParserRuleCall_1_0 = (RuleCall)cLastInstructionAssignment_1.eContents().get(0);
		
		//Instruction hidden(WS):
		//	firstInstruction+=FirstJSONStatements*
		//	lastInstruction=LastJSONStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//firstInstruction+=FirstJSONStatements*
		//lastInstruction=LastJSONStatement
		public Group getGroup() { return cGroup; }
		
		//firstInstruction+=FirstJSONStatements*
		public Assignment getFirstInstructionAssignment_0() { return cFirstInstructionAssignment_0; }
		
		//FirstJSONStatements
		public RuleCall getFirstInstructionFirstJSONStatementsParserRuleCall_0_0() { return cFirstInstructionFirstJSONStatementsParserRuleCall_0_0; }
		
		//lastInstruction=LastJSONStatement
		public Assignment getLastInstructionAssignment_1() { return cLastInstructionAssignment_1; }
		
		//LastJSONStatement
		public RuleCall getLastInstructionLastJSONStatementParserRuleCall_1_0() { return cLastInstructionLastJSONStatementParserRuleCall_1_0; }
	}
	public class InternalInstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InternalInstructions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InternalInstructions hidden():
		//	VariableDeclaration | StringDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration | StringDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }
		
		//StringDeclaration
		public RuleCall getStringDeclarationParserRuleCall_1() { return cStringDeclarationParserRuleCall_1; }
	}
	public class InternalValsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InternalVals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInitialValParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValsStandardValParserRuleCall_1_0 = (RuleCall)cValsAssignment_1.eContents().get(0);
		
		//InternalVals hidden():
		//	InitialVal vals+=StandardVal*;
		@Override public ParserRule getRule() { return rule; }
		
		//InitialVal vals+=StandardVal*
		public Group getGroup() { return cGroup; }
		
		//InitialVal
		public RuleCall getInitialValParserRuleCall_0() { return cInitialValParserRuleCall_0; }
		
		//vals+=StandardVal*
		public Assignment getValsAssignment_1() { return cValsAssignment_1; }
		
		//StandardVal
		public RuleCall getValsStandardValParserRuleCall_1_0() { return cValsStandardValParserRuleCall_1_0; }
	}
	public class LastJSONFinishElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.LastJSONFinish");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInitialValParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValsStandardValParserRuleCall_2_0 = (RuleCall)cValsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LastJSONFinish hidden(WS):
		//	'[' InitialVal vals+=StandardVal* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' InitialVal vals+=StandardVal* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//InitialVal
		public RuleCall getInitialValParserRuleCall_1() { return cInitialValParserRuleCall_1; }
		
		//vals+=StandardVal*
		public Assignment getValsAssignment_2() { return cValsAssignment_2; }
		
		//StandardVal
		public RuleCall getValsStandardValParserRuleCall_2_0() { return cValsStandardValParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class LastJSONStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.LastJSONStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLastJSONFinishParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LastJSONStatement hidden(WS):
		//	'&origin&' ':' value=LastJSONFinish;
		@Override public ParserRule getRule() { return rule; }
		
		//'&origin&' ':' value=LastJSONFinish
		public Group getGroup() { return cGroup; }
		
		//'&origin&'
		public Keyword getOriginKeyword_0() { return cOriginKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=LastJSONFinish
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//LastJSONFinish
		public RuleCall getValueLastJSONFinishParserRuleCall_2_0() { return cValueLastJSONFinishParserRuleCall_2_0; }
	}
	public class StandardValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StandardVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValInternalInstructionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValInternalInstructionInternalInstructionsParserRuleCall_2_0 = (RuleCall)cValInternalInstructionAssignment_2.eContents().get(0);
		private final Keyword cAmpersandKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StandardVal hidden(WS):
		//	',' '&' valInternalInstruction+=InternalInstructions+ '&';
		@Override public ParserRule getRule() { return rule; }
		
		//',' '&' valInternalInstruction+=InternalInstructions+ '&'
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }
		
		//valInternalInstruction+=InternalInstructions+
		public Assignment getValInternalInstructionAssignment_2() { return cValInternalInstructionAssignment_2; }
		
		//InternalInstructions
		public RuleCall getValInternalInstructionInternalInstructionsParserRuleCall_2_0() { return cValInternalInstructionInternalInstructionsParserRuleCall_2_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_3() { return cAmpersandKeyword_3; }
	}
	public class StringDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StringDeclaration");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringDeclaration hidden():
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableFirstJSONStatementsCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableFirstJSONStatementsIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableFirstJSONStatementsCrossReference_1_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VariableDeclaration hidden():
		//	'#' variable=[FirstJSONStatements] '#';
		@Override public ParserRule getRule() { return rule; }
		
		//'#' variable=[FirstJSONStatements] '#'
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//variable=[FirstJSONStatements]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[FirstJSONStatements]
		public CrossReference getVariableFirstJSONStatementsCrossReference_1_0() { return cVariableFirstJSONStatementsCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableFirstJSONStatementsIDTerminalRuleCall_1_0_1() { return cVariableFirstJSONStatementsIDTerminalRuleCall_1_0_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
	}
	
	
	private final TraceryProgramElements pTraceryProgram;
	private final FirstJSONStatementsElements pFirstJSONStatements;
	private final FirstJSONFinishElements pFirstJSONFinish;
	private final InitialValElements pInitialVal;
	private final InstructionElements pInstruction;
	private final InternalInstructionsElements pInternalInstructions;
	private final InternalValsElements pInternalVals;
	private final LastJSONFinishElements pLastJSONFinish;
	private final LastJSONStatementElements pLastJSONStatement;
	private final StandardValElements pStandardVal;
	private final StringDeclarationElements pStringDeclaration;
	private final VariableDeclarationElements pVariableDeclaration;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceryLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraceryProgram = new TraceryProgramElements();
		this.pFirstJSONStatements = new FirstJSONStatementsElements();
		this.pFirstJSONFinish = new FirstJSONFinishElements();
		this.pInitialVal = new InitialValElements();
		this.pInstruction = new InstructionElements();
		this.pInternalInstructions = new InternalInstructionsElements();
		this.pInternalVals = new InternalValsElements();
		this.pLastJSONFinish = new LastJSONFinishElements();
		this.pLastJSONStatement = new LastJSONStatementElements();
		this.pStandardVal = new StandardValElements();
		this.pStringDeclaration = new StringDeclarationElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.languages.tracery.TraceryLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TraceryProgram:
	//	'{'
	//	instructions+=Instruction
	//	'}';
	public TraceryProgramElements getTraceryProgramAccess() {
		return pTraceryProgram;
	}
	
	public ParserRule getTraceryProgramRule() {
		return getTraceryProgramAccess().getRule();
	}
	
	//FirstJSONStatements hidden():
	//	'&' name=ID '&' ':' value=FirstJSONFinish;
	public FirstJSONStatementsElements getFirstJSONStatementsAccess() {
		return pFirstJSONStatements;
	}
	
	public ParserRule getFirstJSONStatementsRule() {
		return getFirstJSONStatementsAccess().getRule();
	}
	
	//FirstJSONFinish hidden():
	//	'[' InternalVals ']' ',';
	public FirstJSONFinishElements getFirstJSONFinishAccess() {
		return pFirstJSONFinish;
	}
	
	public ParserRule getFirstJSONFinishRule() {
		return getFirstJSONFinishAccess().getRule();
	}
	
	//InitialVal hidden(WS):
	//	'&' valInternalInstruction+=InternalInstructions+ '&';
	public InitialValElements getInitialValAccess() {
		return pInitialVal;
	}
	
	public ParserRule getInitialValRule() {
		return getInitialValAccess().getRule();
	}
	
	//Instruction hidden(WS):
	//	firstInstruction+=FirstJSONStatements*
	//	lastInstruction=LastJSONStatement;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//InternalInstructions hidden():
	//	VariableDeclaration | StringDeclaration;
	public InternalInstructionsElements getInternalInstructionsAccess() {
		return pInternalInstructions;
	}
	
	public ParserRule getInternalInstructionsRule() {
		return getInternalInstructionsAccess().getRule();
	}
	
	//InternalVals hidden():
	//	InitialVal vals+=StandardVal*;
	public InternalValsElements getInternalValsAccess() {
		return pInternalVals;
	}
	
	public ParserRule getInternalValsRule() {
		return getInternalValsAccess().getRule();
	}
	
	//LastJSONFinish hidden(WS):
	//	'[' InitialVal vals+=StandardVal* ']';
	public LastJSONFinishElements getLastJSONFinishAccess() {
		return pLastJSONFinish;
	}
	
	public ParserRule getLastJSONFinishRule() {
		return getLastJSONFinishAccess().getRule();
	}
	
	//LastJSONStatement hidden(WS):
	//	'&origin&' ':' value=LastJSONFinish;
	public LastJSONStatementElements getLastJSONStatementAccess() {
		return pLastJSONStatement;
	}
	
	public ParserRule getLastJSONStatementRule() {
		return getLastJSONStatementAccess().getRule();
	}
	
	//StandardVal hidden(WS):
	//	',' '&' valInternalInstruction+=InternalInstructions+ '&';
	public StandardValElements getStandardValAccess() {
		return pStandardVal;
	}
	
	public ParserRule getStandardValRule() {
		return getStandardValAccess().getRule();
	}
	
	//StringDeclaration hidden():
	//	value=STRING;
	public StringDeclarationElements getStringDeclarationAccess() {
		return pStringDeclaration;
	}
	
	public ParserRule getStringDeclarationRule() {
		return getStringDeclarationAccess().getRule();
	}
	
	//VariableDeclaration hidden():
	//	'#' variable=[FirstJSONStatements] '#';
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
