/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceryLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TraceryProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.TraceryProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTraceryProgramAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStartingInstructionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartingInstructionStartingJSONStatementParserRuleCall_2_0 = (RuleCall)cStartingInstructionAssignment_2.eContents().get(0);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsStandardJSONStatementParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TraceryProgram:
		//	'{' {TraceryProgram} startingInstruction=StartingJSONStatement
		//	instructions+=StandardJSONStatement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {TraceryProgram} startingInstruction=StartingJSONStatement
		//instructions+=StandardJSONStatement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{TraceryProgram}
		public Action getTraceryProgramAction_1() { return cTraceryProgramAction_1; }
		
		//startingInstruction=StartingJSONStatement
		public Assignment getStartingInstructionAssignment_2() { return cStartingInstructionAssignment_2; }
		
		//StartingJSONStatement
		public RuleCall getStartingInstructionStartingJSONStatementParserRuleCall_2_0() { return cStartingInstructionStartingJSONStatementParserRuleCall_2_0; }
		
		//instructions+=StandardJSONStatement*
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }
		
		//StandardJSONStatement
		public RuleCall getInstructionsStandardJSONStatementParserRuleCall_3_0() { return cInstructionsStandardJSONStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InitialJSONExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InitialJSONExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//InitialJSONExpression hidden():
		//	var=[VariableDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class InitialValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.initialValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueInternalInstructionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cAmpersandKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//initialValue hidden(WS):
		//	{initialValue} '&' value+=InternalInstruction* '&';
		@Override public ParserRule getRule() { return rule; }
		
		//{initialValue} '&' value+=InternalInstruction* '&'
		public Group getGroup() { return cGroup; }
		
		//{initialValue}
		public Action getInitialValueAction_0() { return cInitialValueAction_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }
		
		//value+=InternalInstruction*
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//InternalInstruction
		public RuleCall getValueInternalInstructionParserRuleCall_2_0() { return cValueInternalInstructionParserRuleCall_2_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_3() { return cAmpersandKeyword_3; }
	}
	public class InternalInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InternalInstruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cAKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cCapitaliseKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEdKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cNumberSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cTheKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cNumberSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cNumberSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//InternalInstruction hidden():
		//	value=STRING |
		//	'#' VariableDeclaration '.a#' |
		//	'#' VariableDeclaration '.capitalise#' |
		//	'#' VariableDeclaration '.ed#' |
		//	'#' VariableDeclaration '.the#' |
		//	'#' VariableDeclaration '#';
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING |
		//'#' VariableDeclaration '.a#' |
		//'#' VariableDeclaration '.capitalise#' |
		//'#' VariableDeclaration '.ed#' |
		//'#' VariableDeclaration '.the#' |
		//'#' VariableDeclaration '#'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }
		
		//'#' VariableDeclaration '.a#'
		public Group getGroup_1() { return cGroup_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1_1() { return cVariableDeclarationParserRuleCall_1_1; }
		
		//'.a#'
		public Keyword getAKeyword_1_2() { return cAKeyword_1_2; }
		
		//'#' VariableDeclaration '.capitalise#'
		public Group getGroup_2() { return cGroup_2; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_2_1() { return cVariableDeclarationParserRuleCall_2_1; }
		
		//'.capitalise#'
		public Keyword getCapitaliseKeyword_2_2() { return cCapitaliseKeyword_2_2; }
		
		//'#' VariableDeclaration '.ed#'
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3_1() { return cVariableDeclarationParserRuleCall_3_1; }
		
		//'.ed#'
		public Keyword getEdKeyword_3_2() { return cEdKeyword_3_2; }
		
		//'#' VariableDeclaration '.the#'
		public Group getGroup_4() { return cGroup_4; }
		
		//'#'
		public Keyword getNumberSignKeyword_4_0() { return cNumberSignKeyword_4_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_4_1() { return cVariableDeclarationParserRuleCall_4_1; }
		
		//'.the#'
		public Keyword getTheKeyword_4_2() { return cTheKeyword_4_2; }
		
		//'#' VariableDeclaration '#'
		public Group getGroup_5() { return cGroup_5; }
		
		//'#'
		public Keyword getNumberSignKeyword_5_0() { return cNumberSignKeyword_5_0; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_5_1() { return cVariableDeclarationParserRuleCall_5_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_5_2() { return cNumberSignKeyword_5_2; }
	}
	public class StandardJSONStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StandardJSONStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cInitialJSONExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cAmpersandKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInitialValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitialValuesInitialValueParserRuleCall_6_0 = (RuleCall)cInitialValuesAssignment_6.eContents().get(0);
		private final Assignment cStandardValuesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStandardValuesStandardValueParserRuleCall_7_0 = (RuleCall)cStandardValuesAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//StandardJSONStatement hidden(WS):
		//	',' '&' InitialJSONExpression '&' ':' '[' initialValues+=initialValue standardValues+=standardValue* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//',' '&' InitialJSONExpression '&' ':' '[' initialValues+=initialValue standardValues+=standardValue* ']'
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }
		
		//InitialJSONExpression
		public RuleCall getInitialJSONExpressionParserRuleCall_2() { return cInitialJSONExpressionParserRuleCall_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_3() { return cAmpersandKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//initialValues+=initialValue
		public Assignment getInitialValuesAssignment_6() { return cInitialValuesAssignment_6; }
		
		//initialValue
		public RuleCall getInitialValuesInitialValueParserRuleCall_6_0() { return cInitialValuesInitialValueParserRuleCall_6_0; }
		
		//standardValues+=standardValue*
		public Assignment getStandardValuesAssignment_7() { return cStandardValuesAssignment_7; }
		
		//standardValue
		public RuleCall getStandardValuesStandardValueParserRuleCall_7_0() { return cStandardValuesStandardValueParserRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}
	public class StartingJSONStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StartingJSONStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialValuesInitialValueParserRuleCall_3_0 = (RuleCall)cInitialValuesAssignment_3.eContents().get(0);
		private final Assignment cStandardValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStandardValuesStandardValueParserRuleCall_4_0 = (RuleCall)cStandardValuesAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StartingJSONStatement hidden(WS):
		//	'&origin&' ':' '[' initialValues+=initialValue standardValues+=standardValue* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'&origin&' ':' '[' initialValues+=initialValue standardValues+=standardValue* ']'
		public Group getGroup() { return cGroup; }
		
		//'&origin&'
		public Keyword getOriginKeyword_0() { return cOriginKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//initialValues+=initialValue
		public Assignment getInitialValuesAssignment_3() { return cInitialValuesAssignment_3; }
		
		//initialValue
		public RuleCall getInitialValuesInitialValueParserRuleCall_3_0() { return cInitialValuesInitialValueParserRuleCall_3_0; }
		
		//standardValues+=standardValue*
		public Assignment getStandardValuesAssignment_4() { return cStandardValuesAssignment_4; }
		
		//standardValue
		public RuleCall getStandardValuesStandardValueParserRuleCall_4_0() { return cStandardValuesStandardValueParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class StandardValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.standardValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStandardValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueInternalInstructionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cAmpersandKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//standardValue hidden(WS):
		//	{standardValue} ',' '&' value+=InternalInstruction* '&';
		@Override public ParserRule getRule() { return rule; }
		
		//{standardValue} ',' '&' value+=InternalInstruction* '&'
		public Group getGroup() { return cGroup; }
		
		//{standardValue}
		public Action getStandardValueAction_0() { return cStandardValueAction_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_2() { return cAmpersandKeyword_2; }
		
		//value+=InternalInstruction*
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//InternalInstruction
		public RuleCall getValueInternalInstructionParserRuleCall_3_0() { return cValueInternalInstructionParserRuleCall_3_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_4() { return cAmpersandKeyword_4; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.tracery.TraceryLanguage.VariableDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableDeclaration hidden():
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final TraceryProgramElements pTraceryProgram;
	private final InitialJSONExpressionElements pInitialJSONExpression;
	private final InitialValueElements pInitialValue;
	private final InternalInstructionElements pInternalInstruction;
	private final StandardJSONStatementElements pStandardJSONStatement;
	private final StartingJSONStatementElements pStartingJSONStatement;
	private final StandardValueElements pStandardValue;
	private final VariableDeclarationElements pVariableDeclaration;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceryLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraceryProgram = new TraceryProgramElements();
		this.pInitialJSONExpression = new InitialJSONExpressionElements();
		this.pInitialValue = new InitialValueElements();
		this.pInternalInstruction = new InternalInstructionElements();
		this.pStandardJSONStatement = new StandardJSONStatementElements();
		this.pStartingJSONStatement = new StartingJSONStatementElements();
		this.pStandardValue = new StandardValueElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.languages.tracery.TraceryLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TraceryProgram:
	//	'{' {TraceryProgram} startingInstruction=StartingJSONStatement
	//	instructions+=StandardJSONStatement*
	//	'}';
	public TraceryProgramElements getTraceryProgramAccess() {
		return pTraceryProgram;
	}
	
	public ParserRule getTraceryProgramRule() {
		return getTraceryProgramAccess().getRule();
	}
	
	//InitialJSONExpression hidden():
	//	var=[VariableDeclaration];
	public InitialJSONExpressionElements getInitialJSONExpressionAccess() {
		return pInitialJSONExpression;
	}
	
	public ParserRule getInitialJSONExpressionRule() {
		return getInitialJSONExpressionAccess().getRule();
	}
	
	//initialValue hidden(WS):
	//	{initialValue} '&' value+=InternalInstruction* '&';
	public InitialValueElements getInitialValueAccess() {
		return pInitialValue;
	}
	
	public ParserRule getInitialValueRule() {
		return getInitialValueAccess().getRule();
	}
	
	//InternalInstruction hidden():
	//	value=STRING |
	//	'#' VariableDeclaration '.a#' |
	//	'#' VariableDeclaration '.capitalise#' |
	//	'#' VariableDeclaration '.ed#' |
	//	'#' VariableDeclaration '.the#' |
	//	'#' VariableDeclaration '#';
	public InternalInstructionElements getInternalInstructionAccess() {
		return pInternalInstruction;
	}
	
	public ParserRule getInternalInstructionRule() {
		return getInternalInstructionAccess().getRule();
	}
	
	//StandardJSONStatement hidden(WS):
	//	',' '&' InitialJSONExpression '&' ':' '[' initialValues+=initialValue standardValues+=standardValue* ']';
	public StandardJSONStatementElements getStandardJSONStatementAccess() {
		return pStandardJSONStatement;
	}
	
	public ParserRule getStandardJSONStatementRule() {
		return getStandardJSONStatementAccess().getRule();
	}
	
	//StartingJSONStatement hidden(WS):
	//	'&origin&' ':' '[' initialValues+=initialValue standardValues+=standardValue* ']';
	public StartingJSONStatementElements getStartingJSONStatementAccess() {
		return pStartingJSONStatement;
	}
	
	public ParserRule getStartingJSONStatementRule() {
		return getStartingJSONStatementAccess().getRule();
	}
	
	//standardValue hidden(WS):
	//	{standardValue} ',' '&' value+=InternalInstruction* '&';
	public StandardValueElements getStandardValueAccess() {
		return pStandardValue;
	}
	
	public ParserRule getStandardValueRule() {
		return getStandardValueAccess().getRule();
	}
	
	//VariableDeclaration hidden():
	//	name=ID;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
