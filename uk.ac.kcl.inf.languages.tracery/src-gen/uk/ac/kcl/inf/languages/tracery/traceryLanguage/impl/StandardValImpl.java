/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InternalInstructions;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.StandardVal;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryLanguagePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Standard Val</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl.StandardValImpl#getValInternalInstruction <em>Val Internal Instruction</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StandardValImpl extends MinimalEObjectImpl.Container implements StandardVal
{
  /**
   * The cached value of the '{@link #getValInternalInstruction() <em>Val Internal Instruction</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValInternalInstruction()
   * @generated
   * @ordered
   */
  protected EList<InternalInstructions> valInternalInstruction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StandardValImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TraceryLanguagePackage.Literals.STANDARD_VAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InternalInstructions> getValInternalInstruction()
  {
    if (valInternalInstruction == null)
    {
      valInternalInstruction = new EObjectContainmentEList<InternalInstructions>(InternalInstructions.class, this, TraceryLanguagePackage.STANDARD_VAL__VAL_INTERNAL_INSTRUCTION);
    }
    return valInternalInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.STANDARD_VAL__VAL_INTERNAL_INSTRUCTION:
        return ((InternalEList<?>)getValInternalInstruction()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.STANDARD_VAL__VAL_INTERNAL_INSTRUCTION:
        return getValInternalInstruction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.STANDARD_VAL__VAL_INTERNAL_INSTRUCTION:
        getValInternalInstruction().clear();
        getValInternalInstruction().addAll((Collection<? extends InternalInstructions>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.STANDARD_VAL__VAL_INTERNAL_INSTRUCTION:
        getValInternalInstruction().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.STANDARD_VAL__VAL_INTERNAL_INSTRUCTION:
        return valInternalInstruction != null && !valInternalInstruction.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //StandardValImpl
