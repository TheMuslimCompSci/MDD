/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.languages.tracery.traceryLanguage.StandardJSONStatement;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.StartingJSONStatement;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryLanguagePackage;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryProgram;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tracery Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl.TraceryProgramImpl#getStartingInstruction <em>Starting Instruction</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl.TraceryProgramImpl#getInstructions <em>Instructions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TraceryProgramImpl extends MinimalEObjectImpl.Container implements TraceryProgram
{
  /**
   * The cached value of the '{@link #getStartingInstruction() <em>Starting Instruction</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartingInstruction()
   * @generated
   * @ordered
   */
  protected StartingJSONStatement startingInstruction;

  /**
   * The cached value of the '{@link #getInstructions() <em>Instructions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstructions()
   * @generated
   * @ordered
   */
  protected EList<StandardJSONStatement> instructions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TraceryProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TraceryLanguagePackage.Literals.TRACERY_PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartingJSONStatement getStartingInstruction()
  {
    return startingInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartingInstruction(StartingJSONStatement newStartingInstruction, NotificationChain msgs)
  {
    StartingJSONStatement oldStartingInstruction = startingInstruction;
    startingInstruction = newStartingInstruction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION, oldStartingInstruction, newStartingInstruction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartingInstruction(StartingJSONStatement newStartingInstruction)
  {
    if (newStartingInstruction != startingInstruction)
    {
      NotificationChain msgs = null;
      if (startingInstruction != null)
        msgs = ((InternalEObject)startingInstruction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION, null, msgs);
      if (newStartingInstruction != null)
        msgs = ((InternalEObject)newStartingInstruction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION, null, msgs);
      msgs = basicSetStartingInstruction(newStartingInstruction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION, newStartingInstruction, newStartingInstruction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StandardJSONStatement> getInstructions()
  {
    if (instructions == null)
    {
      instructions = new EObjectContainmentEList<StandardJSONStatement>(StandardJSONStatement.class, this, TraceryLanguagePackage.TRACERY_PROGRAM__INSTRUCTIONS);
    }
    return instructions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION:
        return basicSetStartingInstruction(null, msgs);
      case TraceryLanguagePackage.TRACERY_PROGRAM__INSTRUCTIONS:
        return ((InternalEList<?>)getInstructions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION:
        return getStartingInstruction();
      case TraceryLanguagePackage.TRACERY_PROGRAM__INSTRUCTIONS:
        return getInstructions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION:
        setStartingInstruction((StartingJSONStatement)newValue);
        return;
      case TraceryLanguagePackage.TRACERY_PROGRAM__INSTRUCTIONS:
        getInstructions().clear();
        getInstructions().addAll((Collection<? extends StandardJSONStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION:
        setStartingInstruction((StartingJSONStatement)null);
        return;
      case TraceryLanguagePackage.TRACERY_PROGRAM__INSTRUCTIONS:
        getInstructions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__STARTING_INSTRUCTION:
        return startingInstruction != null;
      case TraceryLanguagePackage.TRACERY_PROGRAM__INSTRUCTIONS:
        return instructions != null && !instructions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TraceryProgramImpl
