/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InitialJSONExpression;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InternalInstruction;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.StartingJSONStatement;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryLanguagePackage;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryProgram;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.VariableDeclaration;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.initialValue;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.standardValue;

@SuppressWarnings("all")
public class TraceryLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceryLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceryLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceryLanguagePackage.INITIAL_JSON_EXPRESSION:
				if (rule == grammarAccess.getInitialJSONExpressionRule()) {
					sequence_InitialJSONExpression(context, (InitialJSONExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStandardJSONStatementRule()) {
					sequence_InitialJSONExpression_StandardJSONStatement(context, (InitialJSONExpression) semanticObject); 
					return; 
				}
				else break;
			case TraceryLanguagePackage.INTERNAL_INSTRUCTION:
				sequence_InternalInstruction(context, (InternalInstruction) semanticObject); 
				return; 
			case TraceryLanguagePackage.STARTING_JSON_STATEMENT:
				sequence_StartingJSONStatement(context, (StartingJSONStatement) semanticObject); 
				return; 
			case TraceryLanguagePackage.TRACERY_PROGRAM:
				sequence_TraceryProgram(context, (TraceryProgram) semanticObject); 
				return; 
			case TraceryLanguagePackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			case TraceryLanguagePackage.INITIAL_VALUE:
				sequence_initialValue(context, (initialValue) semanticObject); 
				return; 
			case TraceryLanguagePackage.STANDARD_VALUE:
				sequence_standardValue(context, (standardValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     InitialJSONExpression returns InitialJSONExpression
	 *
	 * Constraint:
	 *     var=[VariableDeclaration|ID]
	 */
	protected void sequence_InitialJSONExpression(ISerializationContext context, InitialJSONExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_EXPRESSION__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_EXPRESSION__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialJSONExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1(), semanticObject.eGet(TraceryLanguagePackage.Literals.INITIAL_JSON_EXPRESSION__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StandardJSONStatement returns InitialJSONExpression
	 *
	 * Constraint:
	 *     (var=[VariableDeclaration|ID] initialValues+=initialValue standardValues+=standardValue*)
	 */
	protected void sequence_InitialJSONExpression_StandardJSONStatement(ISerializationContext context, InitialJSONExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalInstruction returns InternalInstruction
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_InternalInstruction(ISerializationContext context, InternalInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.INTERNAL_INSTRUCTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.INTERNAL_INSTRUCTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInternalInstructionAccess().getValueSTRINGTerminalRuleCall_0_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StartingJSONStatement returns StartingJSONStatement
	 *
	 * Constraint:
	 *     (initialValues+=initialValue standardValues+=standardValue*)
	 */
	protected void sequence_StartingJSONStatement(ISerializationContext context, StartingJSONStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TraceryProgram returns TraceryProgram
	 *
	 * Constraint:
	 *     (instructions+=StandardJSONStatement* startingInstruction=StartingJSONStatement)
	 */
	protected void sequence_TraceryProgram(ISerializationContext context, TraceryProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalInstruction returns VariableDeclaration
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.VARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.VARIABLE_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     initialValue returns initialValue
	 *
	 * Constraint:
	 *     value+=InternalInstruction*
	 */
	protected void sequence_initialValue(ISerializationContext context, initialValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     standardValue returns standardValue
	 *
	 * Constraint:
	 *     value+=InternalInstruction*
	 */
	protected void sequence_standardValue(ISerializationContext context, standardValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
