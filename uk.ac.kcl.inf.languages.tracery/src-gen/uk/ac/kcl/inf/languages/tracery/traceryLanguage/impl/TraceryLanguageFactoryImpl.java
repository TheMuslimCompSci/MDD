/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.languages.tracery.traceryLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TraceryLanguageFactoryImpl extends EFactoryImpl implements TraceryLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TraceryLanguageFactory init()
  {
    try
    {
      TraceryLanguageFactory theTraceryLanguageFactory = (TraceryLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(TraceryLanguagePackage.eNS_URI);
      if (theTraceryLanguageFactory != null)
      {
        return theTraceryLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TraceryLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TraceryLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM: return createTraceryProgram();
      case TraceryLanguagePackage.INITIAL_JSON_EXPRESSION: return createInitialJSONExpression();
      case TraceryLanguagePackage.INITIAL_VALUE: return createinitialValue();
      case TraceryLanguagePackage.INTERNAL_INSTRUCTION: return createInternalInstruction();
      case TraceryLanguagePackage.STANDARD_JSON_STATEMENT: return createStandardJSONStatement();
      case TraceryLanguagePackage.STARTING_JSON_STATEMENT: return createStartingJSONStatement();
      case TraceryLanguagePackage.STANDARD_VALUE: return createstandardValue();
      case TraceryLanguagePackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraceryProgram createTraceryProgram()
  {
    TraceryProgramImpl traceryProgram = new TraceryProgramImpl();
    return traceryProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialJSONExpression createInitialJSONExpression()
  {
    InitialJSONExpressionImpl initialJSONExpression = new InitialJSONExpressionImpl();
    return initialJSONExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public initialValue createinitialValue()
  {
    initialValueImpl initialValue = new initialValueImpl();
    return initialValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InternalInstruction createInternalInstruction()
  {
    InternalInstructionImpl internalInstruction = new InternalInstructionImpl();
    return internalInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardJSONStatement createStandardJSONStatement()
  {
    StandardJSONStatementImpl standardJSONStatement = new StandardJSONStatementImpl();
    return standardJSONStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartingJSONStatement createStartingJSONStatement()
  {
    StartingJSONStatementImpl startingJSONStatement = new StartingJSONStatementImpl();
    return startingJSONStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public standardValue createstandardValue()
  {
    standardValueImpl standardValue = new standardValueImpl();
    return standardValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraceryLanguagePackage getTraceryLanguagePackage()
  {
    return (TraceryLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TraceryLanguagePackage getPackage()
  {
    return TraceryLanguagePackage.eINSTANCE;
  }

} //TraceryLanguageFactoryImpl
