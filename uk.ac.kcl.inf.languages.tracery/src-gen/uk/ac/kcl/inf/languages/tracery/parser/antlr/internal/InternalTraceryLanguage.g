/*
 * generated by Xtext 2.24.0
 */
grammar InternalTraceryLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.languages.tracery.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.languages.tracery.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;

}

@parser::members {

 	private TraceryLanguageGrammarAccess grammarAccess;

    public InternalTraceryLanguageParser(TokenStream input, TraceryLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TraceryProgram";
   	}

   	@Override
   	protected TraceryLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTraceryProgram
entryRuleTraceryProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceryProgramRule()); }
	iv_ruleTraceryProgram=ruleTraceryProgram
	{ $current=$iv_ruleTraceryProgram.current; }
	EOF;

// Rule TraceryProgram
ruleTraceryProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getTraceryProgramAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTraceryProgramAccess().getInstructionsInstructionParserRuleCall_1_0());
				}
				lv_instructions_1_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraceryProgramRule());
					}
					add(
						$current,
						"instructions",
						lv_instructions_1_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getTraceryProgramAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleFirstJSONStatements
entryRuleFirstJSONStatements returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getFirstJSONStatementsRule()); }
	iv_ruleFirstJSONStatements=ruleFirstJSONStatements
	{ $current=$iv_ruleFirstJSONStatements.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule FirstJSONStatements
ruleFirstJSONStatements returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&'
		{
			newLeafNode(otherlv_0, grammarAccess.getFirstJSONStatementsAccess().getAmpersandKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFirstJSONStatementsAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFirstJSONStatementsRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='&'
		{
			newLeafNode(otherlv_2, grammarAccess.getFirstJSONStatementsAccess().getAmpersandKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getFirstJSONStatementsAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFirstJSONStatementsAccess().getValueFirstJSONFinishParserRuleCall_4_0());
				}
				lv_value_4_0=ruleFirstJSONFinish
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFirstJSONStatementsRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.FirstJSONFinish");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleFirstJSONFinish
entryRuleFirstJSONFinish returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getFirstJSONFinishRule()); }
	iv_ruleFirstJSONFinish=ruleFirstJSONFinish
	{ $current=$iv_ruleFirstJSONFinish.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule FirstJSONFinish
ruleFirstJSONFinish returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getFirstJSONFinishAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFirstJSONFinishAccess().getInternalValsParserRuleCall_1());
		}
		this_InternalVals_1=ruleInternalVals
		{
			$current = $this_InternalVals_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getFirstJSONFinishAccess().getRightSquareBracketKeyword_2());
		}
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getFirstJSONFinishAccess().getCommaKeyword_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInitialVal
entryRuleInitialVal returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getInitialValRule()); }
	iv_ruleInitialVal=ruleInitialVal
	{ $current=$iv_ruleInitialVal.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InitialVal
ruleInitialVal returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialValAccess().getAmpersandKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialValAccess().getValInternalInstructionInternalInstructionsParserRuleCall_1_0());
				}
				lv_valInternalInstruction_1_0=ruleInternalInstructions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialValRule());
					}
					add(
						$current,
						"valInternalInstruction",
						lv_valInternalInstruction_1_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InternalInstructions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='&'
		{
			newLeafNode(otherlv_2, grammarAccess.getInitialValAccess().getAmpersandKeyword_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getFirstInstructionFirstJSONStatementsParserRuleCall_0_0());
				}
				lv_firstInstruction_0_0=ruleFirstJSONStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					add(
						$current,
						"firstInstruction",
						lv_firstInstruction_0_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.FirstJSONStatements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getLastInstructionLastJSONStatementParserRuleCall_1_0());
				}
				lv_lastInstruction_1_0=ruleLastJSONStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"lastInstruction",
						lv_lastInstruction_1_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.LastJSONStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInternalInstructions
entryRuleInternalInstructions returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getInternalInstructionsRule()); }
	iv_ruleInternalInstructions=ruleInternalInstructions
	{ $current=$iv_ruleInternalInstructions.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InternalInstructions
ruleInternalInstructions returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInternalInstructionsAccess().getVariableDeclarationParserRuleCall_0());
		}
		this_VariableDeclaration_0=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInternalInstructionsAccess().getStringDeclarationParserRuleCall_1());
		}
		this_StringDeclaration_1=ruleStringDeclaration
		{
			$current = $this_StringDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInternalVals
entryRuleInternalVals returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getInternalValsRule()); }
	iv_ruleInternalVals=ruleInternalVals
	{ $current=$iv_ruleInternalVals.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InternalVals
ruleInternalVals returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInternalValsAccess().getInitialValParserRuleCall_0());
		}
		this_InitialVal_0=ruleInitialVal
		{
			$current = $this_InitialVal_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInternalValsAccess().getValsStandardValParserRuleCall_1_0());
				}
				lv_vals_1_0=ruleStandardVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInternalValsRule());
					}
					add(
						$current,
						"vals",
						lv_vals_1_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StandardVal");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLastJSONFinish
entryRuleLastJSONFinish returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getLastJSONFinishRule()); }
	iv_ruleLastJSONFinish=ruleLastJSONFinish
	{ $current=$iv_ruleLastJSONFinish.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule LastJSONFinish
ruleLastJSONFinish returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getLastJSONFinishAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getLastJSONFinishAccess().getInitialValParserRuleCall_1());
		}
		this_InitialVal_1=ruleInitialVal
		{
			$current = $this_InitialVal_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLastJSONFinishAccess().getValsStandardValParserRuleCall_2_0());
				}
				lv_vals_2_0=ruleStandardVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLastJSONFinishRule());
					}
					add(
						$current,
						"vals",
						lv_vals_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StandardVal");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getLastJSONFinishAccess().getRightSquareBracketKeyword_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLastJSONStatement
entryRuleLastJSONStatement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getLastJSONStatementRule()); }
	iv_ruleLastJSONStatement=ruleLastJSONStatement
	{ $current=$iv_ruleLastJSONStatement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule LastJSONStatement
ruleLastJSONStatement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&start&'
		{
			newLeafNode(otherlv_0, grammarAccess.getLastJSONStatementAccess().getStartKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLastJSONStatementAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLastJSONStatementAccess().getValueLastJSONFinishParserRuleCall_2_0());
				}
				lv_value_2_0=ruleLastJSONFinish
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLastJSONStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.LastJSONFinish");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleStandardVal
entryRuleStandardVal returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getStandardValRule()); }
	iv_ruleStandardVal=ruleStandardVal
	{ $current=$iv_ruleStandardVal.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule StandardVal
ruleStandardVal returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getStandardValAccess().getCommaKeyword_0());
		}
		otherlv_1='&'
		{
			newLeafNode(otherlv_1, grammarAccess.getStandardValAccess().getAmpersandKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStandardValAccess().getValInternalInstructionInternalInstructionsParserRuleCall_2_0());
				}
				lv_valInternalInstruction_2_0=ruleInternalInstructions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStandardValRule());
					}
					add(
						$current,
						"valInternalInstruction",
						lv_valInternalInstruction_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InternalInstructions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='&'
		{
			newLeafNode(otherlv_3, grammarAccess.getStandardValAccess().getAmpersandKeyword_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleStringDeclaration
entryRuleStringDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getStringDeclarationRule()); }
	iv_ruleStringDeclaration=ruleStringDeclaration
	{ $current=$iv_ruleStringDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule StringDeclaration
ruleStringDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringDeclarationAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringDeclarationRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getNumberSignKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getVariableFirstJSONStatementsCrossReference_1_0());
				}
			)
		)
		otherlv_2='#'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getNumberSignKeyword_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
