/*
 * generated by Xtext 2.24.0
 */
grammar InternalTraceryLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.languages.tracery.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.languages.tracery.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;

}

@parser::members {

 	private TraceryLanguageGrammarAccess grammarAccess;

    public InternalTraceryLanguageParser(TokenStream input, TraceryLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TraceryProgram";
   	}

   	@Override
   	protected TraceryLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTraceryProgram
entryRuleTraceryProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceryProgramRule()); }
	iv_ruleTraceryProgram=ruleTraceryProgram
	{ $current=$iv_ruleTraceryProgram.current; }
	EOF;

// Rule TraceryProgram
ruleTraceryProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getTraceryProgramAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTraceryProgramAccess().getTraceryProgramAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTraceryProgramAccess().getInstructionsStandardJSONStatementParserRuleCall_2_0());
				}
				lv_instructions_2_0=ruleStandardJSONStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraceryProgramRule());
					}
					add(
						$current,
						"instructions",
						lv_instructions_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StandardJSONStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTraceryProgramAccess().getStartingInstructionStartingJSONStatementParserRuleCall_3_0());
				}
				lv_startingInstruction_3_0=ruleStartingJSONStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraceryProgramRule());
					}
					set(
						$current,
						"startingInstruction",
						lv_startingInstruction_3_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StartingJSONStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTraceryProgramAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInitialJSONExpression
entryRuleInitialJSONExpression returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getInitialJSONExpressionRule()); }
	iv_ruleInitialJSONExpression=ruleInitialJSONExpression
	{ $current=$iv_ruleInitialJSONExpression.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InitialJSONExpression
ruleInitialJSONExpression returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getInitialJSONExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getInitialJSONExpressionAccess().getVarVariableDeclarationCrossReference_0());
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleinitialValue
entryRuleinitialValue returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getInitialValueRule()); }
	iv_ruleinitialValue=ruleinitialValue
	{ $current=$iv_ruleinitialValue.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule initialValue
ruleinitialValue returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInitialValueAccess().getInitialValueAction_0(),
					$current);
			}
		)
		otherlv_1='&'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialValueAccess().getAmpersandKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialValueAccess().getValueInternalInstructionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleInternalInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialValueRule());
					}
					add(
						$current,
						"value",
						lv_value_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InternalInstruction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='&'
		{
			newLeafNode(otherlv_3, grammarAccess.getInitialValueAccess().getAmpersandKeyword_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInternalInstruction
entryRuleInternalInstruction returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getInternalInstructionRule()); }
	iv_ruleInternalInstruction=ruleInternalInstruction
	{ $current=$iv_ruleInternalInstruction.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InternalInstruction
ruleInternalInstruction returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_STRING
				{
					newLeafNode(lv_value_0_0, grammarAccess.getInternalInstructionAccess().getValueSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInternalInstructionRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			otherlv_1='#'
			{
				newLeafNode(otherlv_1, grammarAccess.getInternalInstructionAccess().getNumberSignKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getInternalInstructionAccess().getVariableDeclarationParserRuleCall_1_1());
			}
			this_VariableDeclaration_2=ruleVariableDeclaration
			{
				$current = $this_VariableDeclaration_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3='.a#'
			{
				newLeafNode(otherlv_3, grammarAccess.getInternalInstructionAccess().getAKeyword_1_2());
			}
		)
		    |
		(
			otherlv_4='#'
			{
				newLeafNode(otherlv_4, grammarAccess.getInternalInstructionAccess().getNumberSignKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getInternalInstructionAccess().getVariableDeclarationParserRuleCall_2_1());
			}
			this_VariableDeclaration_5=ruleVariableDeclaration
			{
				$current = $this_VariableDeclaration_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6='.capitalise#'
			{
				newLeafNode(otherlv_6, grammarAccess.getInternalInstructionAccess().getCapitaliseKeyword_2_2());
			}
		)
		    |
		(
			otherlv_7='#'
			{
				newLeafNode(otherlv_7, grammarAccess.getInternalInstructionAccess().getNumberSignKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getInternalInstructionAccess().getVariableDeclarationParserRuleCall_3_1());
			}
			this_VariableDeclaration_8=ruleVariableDeclaration
			{
				$current = $this_VariableDeclaration_8.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_9='.ed#'
			{
				newLeafNode(otherlv_9, grammarAccess.getInternalInstructionAccess().getEdKeyword_3_2());
			}
		)
		    |
		(
			otherlv_10='#'
			{
				newLeafNode(otherlv_10, grammarAccess.getInternalInstructionAccess().getNumberSignKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getInternalInstructionAccess().getVariableDeclarationParserRuleCall_4_1());
			}
			this_VariableDeclaration_11=ruleVariableDeclaration
			{
				$current = $this_VariableDeclaration_11.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_12='.the#'
			{
				newLeafNode(otherlv_12, grammarAccess.getInternalInstructionAccess().getTheKeyword_4_2());
			}
		)
		    |
		(
			otherlv_13='#'
			{
				newLeafNode(otherlv_13, grammarAccess.getInternalInstructionAccess().getNumberSignKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getInternalInstructionAccess().getVariableDeclarationParserRuleCall_5_1());
			}
			this_VariableDeclaration_14=ruleVariableDeclaration
			{
				$current = $this_VariableDeclaration_14.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_15='#'
			{
				newLeafNode(otherlv_15, grammarAccess.getInternalInstructionAccess().getNumberSignKeyword_5_2());
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleStandardJSONStatement
entryRuleStandardJSONStatement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getStandardJSONStatementRule()); }
	iv_ruleStandardJSONStatement=ruleStandardJSONStatement
	{ $current=$iv_ruleStandardJSONStatement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule StandardJSONStatement
ruleStandardJSONStatement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getStandardJSONStatementAccess().getCommaKeyword_0());
		}
		otherlv_1='&'
		{
			newLeafNode(otherlv_1, grammarAccess.getStandardJSONStatementAccess().getAmpersandKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getStandardJSONStatementAccess().getInitialJSONExpressionParserRuleCall_2());
		}
		this_InitialJSONExpression_2=ruleInitialJSONExpression
		{
			$current = $this_InitialJSONExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3='&'
		{
			newLeafNode(otherlv_3, grammarAccess.getStandardJSONStatementAccess().getAmpersandKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getStandardJSONStatementAccess().getColonKeyword_4());
		}
		otherlv_5='['
		{
			newLeafNode(otherlv_5, grammarAccess.getStandardJSONStatementAccess().getLeftSquareBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStandardJSONStatementAccess().getInitialValuesInitialValueParserRuleCall_6_0());
				}
				lv_initialValues_6_0=ruleinitialValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStandardJSONStatementRule());
					}
					add(
						$current,
						"initialValues",
						lv_initialValues_6_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.initialValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStandardJSONStatementAccess().getStandardValuesStandardValueParserRuleCall_7_0());
				}
				lv_standardValues_7_0=rulestandardValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStandardJSONStatementRule());
					}
					add(
						$current,
						"standardValues",
						lv_standardValues_7_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.standardValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getStandardJSONStatementAccess().getRightSquareBracketKeyword_8());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleStartingJSONStatement
entryRuleStartingJSONStatement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getStartingJSONStatementRule()); }
	iv_ruleStartingJSONStatement=ruleStartingJSONStatement
	{ $current=$iv_ruleStartingJSONStatement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule StartingJSONStatement
ruleStartingJSONStatement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&origin&'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartingJSONStatementAccess().getOriginKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartingJSONStatementAccess().getColonKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getStartingJSONStatementAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartingJSONStatementAccess().getInitialValuesInitialValueParserRuleCall_3_0());
				}
				lv_initialValues_3_0=ruleinitialValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartingJSONStatementRule());
					}
					add(
						$current,
						"initialValues",
						lv_initialValues_3_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.initialValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStartingJSONStatementAccess().getStandardValuesStandardValueParserRuleCall_4_0());
				}
				lv_standardValues_4_0=rulestandardValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartingJSONStatementRule());
					}
					add(
						$current,
						"standardValues",
						lv_standardValues_4_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.standardValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getStartingJSONStatementAccess().getRightSquareBracketKeyword_5());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRulestandardValue
entryRulestandardValue returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getStandardValueRule()); }
	iv_rulestandardValue=rulestandardValue
	{ $current=$iv_rulestandardValue.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule standardValue
rulestandardValue returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStandardValueAccess().getStandardValueAction_0(),
					$current);
			}
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getStandardValueAccess().getCommaKeyword_1());
		}
		otherlv_2='&'
		{
			newLeafNode(otherlv_2, grammarAccess.getStandardValueAccess().getAmpersandKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStandardValueAccess().getValueInternalInstructionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleInternalInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStandardValueRule());
					}
					add(
						$current,
						"value",
						lv_value_3_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InternalInstruction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='&'
		{
			newLeafNode(otherlv_4, grammarAccess.getStandardValueAccess().getAmpersandKeyword_4());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableDeclarationRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
